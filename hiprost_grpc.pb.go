// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hiprost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HiprostClient is the client API for Hiprost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiprostClient interface {
	// PutObject creates or overwrites an object.
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*PutObjectResponse, error)
	// GetObject retrieves an object.
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	// DeleteObject deletes an object.
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	// ListObjects lists all objects within a hierarchy.
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	// WatchObjects watches objects for updates.
	WatchObjects(ctx context.Context, in *WatchObjectsRequest, opts ...grpc.CallOption) (Hiprost_WatchObjectsClient, error)
	// Sync ensures the backend has stored all object states of requests finished
	// so far to the storage medium. For purely in-memory backends, this call
	// may succeed trivially.
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type hiprostClient struct {
	cc grpc.ClientConnInterface
}

func NewHiprostClient(cc grpc.ClientConnInterface) HiprostClient {
	return &hiprostClient{cc}
}

func (c *hiprostClient) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*PutObjectResponse, error) {
	out := new(PutObjectResponse)
	err := c.cc.Invoke(ctx, "/com.github.thecount.hiprost.Hiprost/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiprostClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, "/com.github.thecount.hiprost.Hiprost/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiprostClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/com.github.thecount.hiprost.Hiprost/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiprostClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/com.github.thecount.hiprost.Hiprost/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiprostClient) WatchObjects(ctx context.Context, in *WatchObjectsRequest, opts ...grpc.CallOption) (Hiprost_WatchObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hiprost_serviceDesc.Streams[0], "/com.github.thecount.hiprost.Hiprost/WatchObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &hiprostWatchObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hiprost_WatchObjectsClient interface {
	Recv() (*WatchObjectsResponse, error)
	grpc.ClientStream
}

type hiprostWatchObjectsClient struct {
	grpc.ClientStream
}

func (x *hiprostWatchObjectsClient) Recv() (*WatchObjectsResponse, error) {
	m := new(WatchObjectsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hiprostClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/com.github.thecount.hiprost.Hiprost/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiprostServer is the server API for Hiprost service.
// All implementations must embed UnimplementedHiprostServer
// for forward compatibility
type HiprostServer interface {
	// PutObject creates or overwrites an object.
	PutObject(context.Context, *PutObjectRequest) (*PutObjectResponse, error)
	// GetObject retrieves an object.
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	// DeleteObject deletes an object.
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	// ListObjects lists all objects within a hierarchy.
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	// WatchObjects watches objects for updates.
	WatchObjects(*WatchObjectsRequest, Hiprost_WatchObjectsServer) error
	// Sync ensures the backend has stored all object states of requests finished
	// so far to the storage medium. For purely in-memory backends, this call
	// may succeed trivially.
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	mustEmbedUnimplementedHiprostServer()
}

// UnimplementedHiprostServer must be embedded to have forward compatible implementations.
type UnimplementedHiprostServer struct {
}

func (UnimplementedHiprostServer) PutObject(context.Context, *PutObjectRequest) (*PutObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedHiprostServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedHiprostServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedHiprostServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedHiprostServer) WatchObjects(*WatchObjectsRequest, Hiprost_WatchObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchObjects not implemented")
}
func (UnimplementedHiprostServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedHiprostServer) mustEmbedUnimplementedHiprostServer() {}

// UnsafeHiprostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiprostServer will
// result in compilation errors.
type UnsafeHiprostServer interface {
	mustEmbedUnimplementedHiprostServer()
}

func RegisterHiprostServer(s grpc.ServiceRegistrar, srv HiprostServer) {
	s.RegisterService(&_Hiprost_serviceDesc, srv)
}

func _Hiprost_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiprostServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.thecount.hiprost.Hiprost/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiprostServer).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiprost_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiprostServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.thecount.hiprost.Hiprost/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiprostServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiprost_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiprostServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.thecount.hiprost.Hiprost/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiprostServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiprost_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiprostServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.thecount.hiprost.Hiprost/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiprostServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiprost_WatchObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HiprostServer).WatchObjects(m, &hiprostWatchObjectsServer{stream})
}

type Hiprost_WatchObjectsServer interface {
	Send(*WatchObjectsResponse) error
	grpc.ServerStream
}

type hiprostWatchObjectsServer struct {
	grpc.ServerStream
}

func (x *hiprostWatchObjectsServer) Send(m *WatchObjectsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Hiprost_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiprostServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.thecount.hiprost.Hiprost/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiprostServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hiprost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.thecount.hiprost.Hiprost",
	HandlerType: (*HiprostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObject",
			Handler:    _Hiprost_PutObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _Hiprost_GetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Hiprost_DeleteObject_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _Hiprost_ListObjects_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Hiprost_Sync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchObjects",
			Handler:       _Hiprost_WatchObjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hiprost.proto",
}
